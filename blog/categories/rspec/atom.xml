<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rspec | mochiz blog]]></title>
  <link href="http://mochiz.github.com/blog/categories/rspec/atom.xml" rel="self"/>
  <link href="http://mochiz.github.com/"/>
  <updated>2013-05-05T10:27:00+09:00</updated>
  <id>http://mochiz.github.com/</id>
  <author>
    <name><![CDATA[hiroshi asakura]]></name>
    <email><![CDATA[mochi.hiro43@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails勉強会＠東京 第82回に参加してきました]]></title>
    <link href="http://mochiz.github.com/blog/2013-04-21-rails-meeting-tokyo-82/"/>
    <updated>2013-04-21T00:46:00+09:00</updated>
    <id>http://mochiz.github.com/blog/rails-meeting-tokyo-82</id>
    <content type="html"><![CDATA[<p>いつ以来でしょうか、<a href="http://railsmeetingtokyo.doorkeeper.jp/events/3617">Rails勉強会＠東京</a>に参加して来ました。<br/>
メモした内容を幾つかピックアップしてお届けします。</p>

<h2>TDD / BDD について勉強しよう</h2>

<ul>
<li>rspec の describe と context の使い分けを教えて

<ul>
<li>describe はメソッドと1対1に使う</li>
<li>describe はテスト対象</li>
<li>context は場合分け</li>
<li>context 内でテスト対象が複数ある場合、複数 describe がぶら下がる</li>
</ul>
</li>
<li>書籍について

<ul>
<li><a href="http://www.amazon.co.jp/dp/4798124583">実践テスト駆動開発 テストに導かれてオブジェクト指向ソフトウェアを育てる </a> を読もう</li>
<li><a href="http://www.amazon.co.jp/dp/4894717115">テスト駆動開発入門</a> を読もう</li>
<li><a href="http://www.amazon.co.jp/dp/0131495054">xUnit Test Patterns: Refactoring Test Code</a> 無理でしょ</li>
</ul>
</li>
<li>spec どんな感じに書いてる?

<ul>
<li>モックを使うと、実装が変わってもテストが成功する場合があるのであまり好きじゃない</li>
<li>イヤイヤモックを使ってる（笑）</li>
<li>controller スペックからさらっと書く（どこにリダイレクトされるか、何がレンダーされるか程度）</li>
<li>ソーシャルゲームではビューがコロコロ変わるので、requests specは無駄が多いので書かない</li>
</ul>
</li>
</ul>


<h2>Rais4についてなんか勉強しよう</h2>

<ul>
<li>controller での concern の役割

<ul>
<li>before_filter をまとめる役割としての concern はよく使う</li>
<li>複数の controller で、メンテナンス中にメンテ画面へ飛ばす処理をまとめる、などに使っている</li>
<li>↑の処理は application_controller にあってもいいけど、アプリ全体で使う機能ではないので、適切ではない</li>
<li>concern に抽出することで肥大化を防いでいる</li>
</ul>
</li>
<li>プリローダーについて

<ul>
<li>spring をつかおう</li>
</ul>
</li>
</ul>


<h2>その他メモった内容</h2>

<ul>
<li><a href="https://github.com/amatsuda/active_decorator">amatsuda/active_decorator · GitHub</a><br/>
 person.link のように、オブジェクト指向的なヘルパーメソッドを実現してくれる。</li>
<li><a href="https://github.com/jnicklas/turnip">jnicklas/turnip · GitHub</a><br/>
 カブ。モダンな cucumber</li>
<li><a href="https://github.com/amatsuda/hocus_pocus">amatsuda/hocus_pocus · GitHub</a><br/>
 なんだっけこれ</li>
<li><a href="http://www.datadoghq.com/">Datadog - Home</a><br/>
 dashboard サービス</li>
</ul>


<h2>おわり</h2>

<p>人が多いところとかボエッとなるかと思ったのですが、楽しみながら勉強することが出来ました。<br/>
コミュ障の私でも、コードを通してなら意思の疎通が図れそうなことが分かったので、また機会があればヒドいコードを持ち込みたいと思います。<br/>
主催者・参加者の皆さんありがとうございました。</p>
]]></content>
  </entry>
  
</feed>
